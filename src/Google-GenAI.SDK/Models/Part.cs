namespace GoogleGenAI.SDK.Models;

/// <summary>
/// A datatype containing media that is part of a multi-part `Content` message.  A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`.  A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if the `inline_data` field is filled with raw bytes.
/// </summary>
public class Part
{
    /// <summary>
    /// A predicted `FunctionCall` returned from the model that contains a string representing the `FunctionDeclaration.name` with the arguments and their values.
    /// </summary>
    public FunctionCall? FunctionCall { get; init; }

    /// <summary>
    /// Optional. Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data.
    /// </summary>
    public VideoMetadata? VideoMetadata { get; init; }

    /// <summary>
    /// URI based data.
    /// </summary>
    public FileData? FileData { get; init; }

    /// <summary>
    /// Optional. An opaque signature for the thought so it can be reused in subsequent requests.
    /// </summary>
    public string? ThoughtSignature { get; init; }

    /// <summary>
    /// The result output of a `FunctionCall` that contains a string representing the `FunctionDeclaration.name` and a structured JSON object containing any output from the function is used as context to the model.
    /// </summary>
    public FunctionResponse? FunctionResponse { get; init; }

    /// <summary>
    /// Inline text.
    /// </summary>
    public string? Text { get; init; }

    /// <summary>
    /// Inline media bytes.
    /// </summary>
    public Blob? InlineData { get; init; }

    /// <summary>
    /// Result of executing the `ExecutableCode`.
    /// </summary>
    public CodeExecutionResult? CodeExecutionResult { get; init; }

    /// <summary>
    /// Optional. Indicates if the part is thought from the model.
    /// </summary>
    public bool? Thought { get; init; }

    /// <summary>
    /// Code generated by the model that is meant to be executed.
    /// </summary>
    public ExecutableCode? ExecutableCode { get; init; }
}